{"ast":null,"code":"var _jsxFileName = \"/Users/hansijia/9900_/9900/frontend/src/pages/RegisterCustomer.jsx\",\n  _s = $RefreshSig$();\n//sijia han\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { TextField, Button, Typography, Box, Snackbar, IconButton } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RegisterCustomer = () => {\n  _s();\n  const navigate = useNavigate();\n  const [registerData, setRegisterData] = useState({\n    companyName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    cardNumber: '',\n    cardCVC: '',\n    cardExpirationDate: ''\n  });\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const handleBack = () => navigate(-1);\n  const updateField = e => {\n    setRegisterData({\n      ...registerData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n  const getMinExpirationDate = () => {\n    const today = new Date();\n    const month = today.getMonth() + 1; // getMonth() returns month from 0-11\n    const year = today.getFullYear();\n    return `${month.toString().padStart(2, '0')}/${year.toString().slice(2)}`;\n  };\n  const registerUser = async e => {\n    e.preventDefault();\n\n    // Check if passwords match\n    if (registerData.password !== registerData.confirmPassword) {\n      setSnackbarMessage(\"Passwords do not match.\");\n      setOpenSnackbar(true);\n      return;\n    }\n\n    // Attempt to register the user\n    try {\n      const response = await axios.post('http://localhost:5005/user/auth/register', {\n        companyName: registerData.companyName,\n        email: registerData.email,\n        password: registerData.password\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // If registration is successful\n      if (response.status === 201) {\n        setSnackbarMessage(\"Registration successful!\");\n        setOpenSnackbar(true);\n        setTimeout(() => {\n          navigate('/login-customer');\n        }, 2000);\n      }\n    } catch (errorResponse) {\n      // Handle registration errors\n      let errorMessage = 'An unexpected error occurred during registration.';\n      if (errorResponse.response) {\n        const status = errorResponse.response.status;\n        const message = errorResponse.response.data.message;\n        errorMessage = status === 400 && message.includes('email already exists') ? 'This email is already in use. Please use a different email address.' : message;\n      }\n      setSnackbarMessage(errorMessage);\n      setOpenSnackbar(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      name: \"cardExpirationDate\",\n      label: \"Expiration Date (MM/YY)\",\n      value: registerData.cardExpirationDate,\n      onChange: updateField,\n      inputProps: {\n        min: getMinExpirationDate()\n      },\n      type: \"month\" // This allows for a YYYY-MM format, adjust accordingly if using a different format\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSnackbar,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      message: snackbarMessage,\n      action: /*#__PURE__*/_jsxDEV(IconButton, {\n        size: \"small\",\n        \"aria-label\": \"close\",\n        color: \"inherit\",\n        onClick: handleCloseSnackbar,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(RegisterCustomer, \"ShwpDxxi3t9/Iw6yc61jZpO09G8=\", false, function () {\n  return [useNavigate];\n});\n_c = RegisterCustomer;\nexport default RegisterCustomer;\nvar _c;\n$RefreshReg$(_c, \"RegisterCustomer\");","map":{"version":3,"names":["React","useState","useNavigate","axios","TextField","Button","Typography","Box","Snackbar","IconButton","ArrowBackIcon","CloseIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","RegisterCustomer","_s","navigate","registerData","setRegisterData","companyName","email","password","confirmPassword","cardNumber","cardCVC","cardExpirationDate","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","handleBack","updateField","e","target","name","value","handleCloseSnackbar","event","reason","getMinExpirationDate","today","Date","month","getMonth","year","getFullYear","toString","padStart","slice","registerUser","preventDefault","response","post","headers","status","setTimeout","errorResponse","errorMessage","message","data","includes","children","margin","required","fullWidth","label","onChange","inputProps","min","type","fileName","_jsxFileName","lineNumber","columnNumber","open","autoHideDuration","onClose","action","size","color","onClick","fontSize","_c","$RefreshReg$"],"sources":["/Users/hansijia/9900_/9900/frontend/src/pages/RegisterCustomer.jsx"],"sourcesContent":["//sijia han\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { TextField, Button, Typography, Box, Snackbar, IconButton } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst RegisterCustomer = () => {\n    const navigate = useNavigate();\n    \n    const [registerData, setRegisterData] = useState({\n        companyName: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        cardNumber: '',\n        cardCVC: '',\n        cardExpirationDate: '',\n    });\n\n    const [openSnackbar, setOpenSnackbar] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n\n    const handleBack = () => navigate(-1);\n    \n    const updateField = (e) => {\n        setRegisterData({\n            ...registerData,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleCloseSnackbar = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenSnackbar(false);\n    };\n\n    const getMinExpirationDate = () => {\n        const today = new Date();\n        const month = today.getMonth() + 1; // getMonth() returns month from 0-11\n        const year = today.getFullYear();\n        return `${month.toString().padStart(2, '0')}/${year.toString().slice(2)}`;\n    };\n\n    const registerUser = async (e) => {\n        e.preventDefault();\n    \n        // Check if passwords match\n        if (registerData.password !== registerData.confirmPassword) {\n            setSnackbarMessage(\"Passwords do not match.\");\n            setOpenSnackbar(true);\n            return;\n        }\n    \n        // Attempt to register the user\n        try {\n            const response = await axios.post('http://localhost:5005/user/auth/register', {\n                companyName: registerData.companyName,\n                email: registerData.email,\n                password: registerData.password,\n            }, {\n                headers: { 'Content-Type': 'application/json' },\n            });\n\n            // If registration is successful\n            if (response.status === 201) {\n                setSnackbarMessage(\"Registration successful!\");\n                setOpenSnackbar(true);\n                setTimeout(() => {\n                    navigate('/login-customer');\n                }, 2000);\n            }\n        } catch (errorResponse) {\n            // Handle registration errors\n            let errorMessage = 'An unexpected error occurred during registration.';\n            if (errorResponse.response) {\n                const status = errorResponse.response.status;\n                const message = errorResponse.response.data.message;\n    \n                errorMessage = status === 400 && message.includes('email already exists') \n                               ? 'This email is already in use. Please use a different email address.' \n                               : message;\n            }\n            setSnackbarMessage(errorMessage);\n            setOpenSnackbar(true);\n        }\n    };\n\n    return (\n        <>\n            {/* Your form and other UI elements */}\n            <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"cardExpirationDate\"\n                label=\"Expiration Date (MM/YY)\"\n                value={registerData.cardExpirationDate}\n                onChange={updateField}\n                inputProps={{ min: getMinExpirationDate() }}\n                type=\"month\" // This allows for a YYYY-MM format, adjust accordingly if using a different format\n            />\n\n            {/* Include other fields and a submit button */}\n\n            <Snackbar\n                open={openSnackbar}\n                autoHideDuration={6000}\n                onClose={handleCloseSnackbar}\n                message={snackbarMessage}\n                action={\n                    <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleCloseSnackbar}>\n                        <CloseIcon fontSize=\"small\" />\n                    </IconButton>\n                }\n            />\n        </>\n    );\n};\n\nexport default RegisterCustomer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}